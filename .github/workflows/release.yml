name: Build & Release

on:
  push:
    tags:
      - 'v*' # dispara quando criar tags tipo v1.0.0, v1.0.1 etc.

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      # Prepara o certificado se o secret CSC_LINK estiver presente
      - name: Prepare Windows signing certificate (if provided)
        if: ${{ secrets.CSC_LINK != '' }}
        shell: pwsh
        run: |
          Write-Host "Decoding certificate..."
          $certBase64 = "${{ secrets.CSC_LINK }}"
          [IO.File]::WriteAllBytes("$env:GITHUB_WORKSPACE\\certificate.p12", [Convert]::FromBase64String($certBase64))
          Write-Host "Certificate written to: $env:GITHUB_WORKSPACE\\certificate.p12"

      - name: Build app (Windows)
        run: npm run dist
        env:
          CSC_LINK: ${{ github.workspace }}\\certificate.p12
          WIN_CSC_LINK: ${{ github.workspace }}\\certificate.p12
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD || '' }}

      - name: Cleanup certificate
        if: ${{ secrets.CSC_LINK != '' }}
        shell: pwsh
        run: |
          if (Test-Path "$env:GITHUB_WORKSPACE\\certificate.p12") {
            Remove-Item -Force "$env:GITHUB_WORKSPACE\\certificate.p12"
            Write-Host "Certificate cleaned up."
          }

      - name: Upload artifacts to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
